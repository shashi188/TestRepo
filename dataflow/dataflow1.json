{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "empDataset",
						"type": "DatasetReference"
					},
					"name": "NewBranch"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outptitfilyer",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "anualsaldataset",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "ModifyColumns2",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "window1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empno as integer,",
				"          ename as string,",
				"          sal as integer,",
				"          loc as string,",
				"          dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> NewBranch",
				"sort1 filter(equals(dept,'20')) ~> filter1",
				"ModifyColumns1 sort(asc(ename, true),",
				"     caseInsensitive: true) ~> sort1",
				"NewBranch derive(ename = lower(ename),",
				"          anualsal = toDecimal(sal) * 1000) ~> ModifyColumns1",
				"ModifyColumns2 derive(sal = multiply(sal,1000)) ~> derivedColumn1",
				"NewBranch select(mapColumn(",
				"          ename,",
				"          sal",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(sal = toDecimal(sal)) ~> ModifyColumns2",
				"derivedColumn1 keyGenerate(output(empkey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"NewBranch window(over(dept),",
				"     asc(sal, true),",
				"     sumsalary = sum(sal),",
				"          rank = max(sal),",
				"          denserank = denseRank()) ~> window1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     partitionFileNames:['filterdatanew.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     partitionFileNames:['anualsal.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}