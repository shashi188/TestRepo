{
	"name": "UnionDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customerDataset",
						"type": "DatasetReference"
					},
					"name": "customerdata"
				},
				{
					"dataset": {
						"referenceName": "peopleDataset",
						"type": "DatasetReference"
					},
					"name": "peopleData"
				},
				{
					"dataset": {
						"referenceName": "productsData",
						"type": "DatasetReference"
					},
					"name": "productsData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Unionoutput",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Index as string,",
				"          {Customer Id} as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Company as string,",
				"          City as string,",
				"          Country as string,",
				"          {Phone 1} as string,",
				"          {Phone 2} as string,",
				"          Email as string,",
				"          {Subscription Date} as string,",
				"          Website as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customerdata",
				"source(output(",
				"          Index as string,",
				"          {User Id} as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Sex as string,",
				"          Email as string,",
				"          Phone as string,",
				"          {Date of birth} as string,",
				"          {Job Title} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> peopleData",
				"source(output(",
				"          index as string,",
				"          name as string,",
				"          ean as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> productsData",
				"customerdata, peopleData, productsData union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     partitionFileNames:['unionoutputdata'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}